@{
    Layout = null;
}

<!--右侧实体内容-->

<el-main id="partPage" style="position:relative;margin-left:1%;">
    <div class="head-fixed" onclick="loadPage('/Main/approval')">
        <i class="el-icon-arrow-left"></i>
        图纸审批-{{nodeInfo.NodeName}}
    </div>
    <template v-for="(d,index) in dataArr">
        <!--表格實體-->
        <el-table :data="d.tableData" stripe border>
            <el-table-column v-for="(value,key) in d.items" :prop="key" :label="value" :key="key">
            </el-table-column>
        </el-table>
        <!--底部翻頁-->
        <div style="text-align:right">
            <el-pagination v-on:current-change="handleBomPageChange($event,index)"
                           :current-page="d.currentPage"
                           :page-sizes="[5]"
                           :page-size="5"
                           layout="total, sizes, prev, pager, next, jumper"
                           :total="d.totalRows">
            </el-pagination>
        </div>
        <!--上传表單-->
        @*<el-form-item label="上传excel">*@
        <el-upload class="upload-demo"
                   action="/drawingupload/UploadAndGetInfo"
                   :on-success="handleSuccess"
                   @*:before-remove="beforeRemove"*@
                   :before-upload="beforeExcelUpload"
                   multiple
                   :limit="1"
                   :on-exceed="handleExceed"
                   :file-list="excelList">
            <el-button size="small" type="primary" v-on:click="bomIndex = index">上传{{d.Sorts}}件</el-button>
            <div slot="tip" class="el-upload__tip">只能上传excel文件，且不超过500kb</div>
        </el-upload>
        @*</el-form-item>*@
    </template>
    <div style="margin:10px;">
        <span>上传所需excel模板 - > </span><el-button size="mini" type="primary" v-on:click="downloadFile(mediaId)" :disabled="disablePage">下载模板</el-button>
    </div>

    <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="110px" class="demo-ruleForm"
             id="uploadForm" enctype="multipart/form-data">
        <el-form-item label="项目名" prop="ProjectId">
            <el-select v-model="ruleForm.ProjectId" placeholder="请选择" style="width:400px;" v-on:change="selectProject">
                <el-option v-for="item in projectList"
                           :key="item.ProjectId"
                           :label="item.ProjectName"
                           :value="item.ProjectId">
                    <span style="float: left">{{ item.ProjectName }}  -编号: {{item.ProjectId}}</span>
                    <span style="float: right; color: #8492a6; font-size: 13px"></span>
                </el-option>
            </el-select>
            @*<el-button class="button-new-tag" size="small" v-on:click="showAddProject = true">+ 添加项目</el-button>
            <el-button v-show="showAddProject" class="button-new-tag" size="small" v-on:click="showAddProject = false">隐藏</el-button>*@
        </el-form-item>

        <el-form-item label="标题" prop="Title">
            <el-input v-model="ruleForm.Title"></el-input>
        </el-form-item>
        <el-form-item label="申请人" prop="name">
            <el-input v-model="ruleForm.name" :disabled="true"></el-input>
        </el-form-item>
        <el-form-item label="建议" prop="remark">
            <el-input v-model="ruleForm.remark"></el-input>
        </el-form-item>

        <el-form-item label="上传图片">
            <el-upload action="/drawingupload/Upload"
                       list-type="picture-card"
                       :file-list="imageList"
                       :on-preview="handlePictureCardPreview"
                       :on-remove="handlePictureRemove"
                       :on-success="handlePictureCardSuccess"
                       :before-upload="beforePictureUpload">
                <i class="el-icon-plus"></i>
            </el-upload>
            <el-dialog :visible.sync="dialogVisible">
                <img width="100%" :src="dialogImageUrl" alt="">
            </el-dialog>
        </el-form-item>

        <el-form-item label="上传PDF图纸" required="required">
            <el-upload class="upload-demo"
                       drag
                       :file-list="pdfList"
                       action="/drawingupload/Upload"
                       :on-remove="handleFileRemove"
                       :before-remove="isPdfFile = true"
                       :before-upload="beforePdfFileUpload"
                       :on-success="handlePdfFileCardSuccess"
                       multiple>
                <i class="el-icon-upload"></i>
                <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
                <div class="el-upload__tip" slot="tip">不超过30M</div>
            </el-upload>
        </el-form-item>

        <el-form-item label="上传其他附件">
            <el-upload class="upload-demo"
                       drag
                       :file-list="fileList"
                       action="/drawingupload/Upload"
                       :on-remove="handleFileRemove"
                       :before-remove="isPdfFile = false"
                       :before-upload="beforeFileUpload"
                       :on-success="HandleFileSuccess"
                       multiple>
                <i class="el-icon-upload"></i>
                <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
                <div class="el-upload__tip" slot="tip">不超过30M</div>
            </el-upload>
        </el-form-item>

        <!--添加审批人-->
        <sam-approver-list :nodeList="nodeList" :nodedata="nodeInfo" :single="true" :special-roles="specialRoles" :special-role-names="specialRoleNames">
        </sam-approver-list>
        <!--添加抄送人-->
        @*<sam-addapprover :preset="preCopy" :approvers="ruleForm.copyers">
        </sam-addapprover>*@
        <el-form-item>
            <el-button type="primary" v-on:click="onSubmit('ruleForm')" :disabled="disablePage">提交</el-button>
            <el-button v-on:click="resetForm('ruleForm')">重置</el-button>
            @*<el-button v-on:click="downLoad">下载</el-button>*@
        </el-form-item>
    </el-form>
</el-main>

<script>
    var mediaId = '@@lAvPBY0V47H4Ai_OIqLuUc5MMPmu'
    var upBom = []
    var isPdf = false
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                preApprove: false,
                preCopy: false,
                isPdfFile: false,
                mediaId: mediaId,
                pdfList: [],
                excelList: [],
                fileList: [],
                imageList: [],
                mediaList: [],
                mediaPdfList: [],
                data: [],
                items: [],
                tableData: [],
                bomIndex: 0,
                dataArr: [
                    {
                        data: [],
                        tableData: [],
                        Sorts: '标准',
                        currentPage: 1,
                        totalRows: 0,
                        items: {}
                    },
                    {
                        data: [],
                        tableData: [],
                        Sorts: '自制',
                        currentPage: 1,
                        totalRows: 0,
                        items: {}
                    },
                    {
                        data: [],
                        tableData: [],
                        Sorts: '外购',
                        currentPage: 1,
                        totalRows: 0,
                        items: {}
                    }],
                nodeInfo: {},
                nodeList: [],
                projectList: [],
                //图片上传参数
                dialogImageUrl: '',
                dialogVisible: false,
                //表单参数
                ruleForm: {
                    name: DingData.nickName,
                    Dept: DingData.departName,
                    remark: '',
                    ImageUrl: '',
                    OldImageUrl: '',
                    FileUrl: '',
                    OldFilePDFUrl: '',
                    FilePDFUrl: '',
                    OldFileUrl: '',
                    MediaId: '',
                    MediaIdPDF: '',
                    inputProjectId: '',
                    Title: '',
                    ProjectId: null,
                    Time: ''
                }
            }
        },
        methods: {
            //提交审批
            onSubmit(formName) {
                var that = this
                that.fileListToUrl()
                this.$refs[formName].validate((valid) => {
                    if (valid && this.data.length > 0) {
                        that.disablePage = true
                        var ProjectName
                        for (let p of that.projectList) {
                            if (p.ProjectId == that.ruleForm.ProjectId) {
                                ProjectName = p.ProjectName
                            }
                        }
                        var paramArr = []
                        var stateArr = []
                        for (var i = 0; i < that.pdfList.length; i++) {
                            stateArr.push(0)
                        }
                        if (!that.ruleForm.FilePDFUrl) {
                            this.$alert('图纸未上传', '提交错误', {
                                confirmButtonText: '确定',
                                callback: action => {

                                }
                            });
                            that.disablePage = false
                            return 
                        }
                        paramArr.push({
                            "ApplyMan": DingData.nickName,
                            "ApplyManId": DingData.userid,
                            "NodeId": "0",
                            "ApplyTime": _getTime(),
                            "IsEnable": "1",
                            "FlowId": FlowId + '',
                            "Remark": that.ruleForm.remark,
                            "IsSend": false,
                            "State": "1",
                            "ImageUrl": that.ruleForm.ImageUrl,
                            "OldImageUrl": that.ruleForm.OldImageUrl,
                            "FilePDFUrl": that.ruleForm.FilePDFUrl,
                            "OldFilePDFUrl": that.ruleForm.OldFilePDFUrl,
                            "FileUrl": that.ruleForm.FileUrl,
                            "OldFileUrl": that.ruleForm.OldFileUrl,
                            "MediaId": that.mediaList.join(','),
                            "MediaIdPDF": that.mediaPdfList.join(','),
                            "Title": that.ruleForm.Title,
                            "ProjectName": ProjectName,
                            "ProjectId": that.ruleForm.ProjectId,
                            "PdfState": stateArr.join(',')
                        }) 
                        for (let node of that.nodeList) {
                            if (this.specialRoleNames.indexOf(node.NodeName)>=0) {
                                console.log(node)
                                console.log(node.AddPeople)
                                if (!that.preApprove && node.AddPeople.length == 0) {
                                    this.$alert('您尚未选择审批人', '提交错误', {
                                        confirmButtonText: '确定',
                                        callback: action => {
                                            
                                        }
                                    });
                                    that.disablePage = false
                                    return 
                                }
                                for (let a of node.AddPeople) {
                                    paramArr.push({
                                        "ApplyMan": a.name,
                                        "ApplyManId": a.emplId,
                                        "IsEnable": 1,
                                        "FlowId": FlowId + '',
                                        "NodeId": node.NodeId + '',
                                        "IsSend": false,
                                        "State": 0,
                                        "ProjectId": that.ruleForm.ProjectId,
                                        "OldFileUrl": null,
                                        "IsBack": null
                                    })
                                }
                            }
                        }
                        $.ajax({
                            url: '/FlowInfo/CreateTaskInfo',
                            type: 'POST',
                            data: JSON.stringify(paramArr),
                            success: function (data) {
                                console.log("提交审批ok")
                                var taskId = JSON.parse(data).Content
                                console.log(paramArr)
                                console.log(taskId)
                                that.bindData(taskId)
                            }
                        })
                    } else {
                        that.$alert('表单数据不全或有误', '提交错误', {
                            confirmButtonText: '确定'
                        });
                        console.log('error submit!!');
                        return false;
                    }
                });
            },
            downLoad() {
                var that = this
                let url = '123.PDF'
                url = '/NewsAndCases/DownloadFile'
                
                //window.location.href = url
                //window.open(url)


                that._postData(url, function (result) {
                    console.log(result.data.replace("application/pdf", "pdf/octet-stream"))
                    window.location.href = result.data.replace("application/pdf", "pdf/octet-stream")
                    
                }, {
                        FileName: '123.pdf',
                        FilePath:'~/UploadFile/PDF/123.PDF'
                    })
            },
            //bom表格翻页
            handleBomPageChange(page, index) {
                console.log(page)
                console.log(index)
                this.currentPage = page
                this.dataArr[index].currentPage = page
                this.getData()
                this.dataArr[index].tableData = _cloneArr(this.tableData)
            },
            //审批绑定BOM表数据
            bindData(taskId) {
                for (let d of upBom) {
                    d.TaskId = taskId
                }
                var that = this
                $.ajax({
                    url: "/DrawingUpload/LoadPurchase",
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(upBom),
                    success: function (data) {
                        console.log("审批绑定BOM表数据ok")
                        console.log(upBom)
                        console.log(data)
                        that.doneSubmit()
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        console.log(XMLHttpRequest.status);
                    }
                })
            },
            selectProject(id) {
                console.log(id)
                for (var project of this.projectList) {
                    if (project.ProjectId == id) {
                        this.ruleForm.Title = project.ProjectName + ' - 编号：' + project.ProjectId
                    }
                }
            },
            //上传文件方法
            handleSuccess(response, file, fileList) {
                console.log(response)
                var tableData = response[0].Value
                this.currentPage = 1
                let BomId = ''
                if (!(tableData && tableData.length > 0)) return
                this.data = []
                for (let i = 0; i < tableData.length; i++) {
                    let data = tableData[i]
                    if (i == 0) {
                        this.items = {}
                        for (let c in data) {
                            if (c.substring(0, 6) == 'Column') {
                                this.items[c] = data[c]
                                this.dataArr[this.bomIndex].items[c] = data[c]
                            }
                            else if (c.length > 10) {
                                BomId = c
                            }
                        }
                    } else {
                        if (data['Column1'] && data['Column1'] != "") {
                            this.dataArr[this.bomIndex].data.push(data)
                            this.data.push(data) 
                            upBom.push({
                                BomId: BomId,
                                DrawingNo: data.Column1,
                                Name: data.Column2,
                                Count: data.Column3,
                                MaterialScience: data.Column4,
                                Unit: data.Column5,
                                SingleWeight: data.Column6,
                                AllWeight: data.Column7,
                                NeedTime: data.Column8,
                                Mark: data.Column9,
                                Sorts: this.dataArr[this.bomIndex].Sorts
                            })
                        }
                    }
                }
                console.log(tableData)
                //this.totalRows = this.data.length
                this.dataArr[this.bomIndex].totalRows = this.dataArr[this.bomIndex].data.length
                this.getData()
                this.dataArr[this.bomIndex].tableData = this.tableData
            },
            handleExceed(files, fileList) {
                this.$message.warning(`当前限制选择 1 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
            },
            beforeRemove(file, fileList) {
                return this.$confirm(`确定移除 ${file.name}？`);
            },
            
            handleFileRemove(file, fileList) {
                this.isPdfFile ? this.pdfList = _cloneArr(fileList) : this.fileList = _cloneArr(fileList)
            },

            handlePdfFileCardSuccess(response, file, fileList) {
                var that = this
                var paramObj = {
                    "": file.response.Content
                }
                $.ajax({
                    url: '/DingTalkServers/UploadMedia/',
                    type: 'POST',
                    data: paramObj,
                    success: function (data) {
                        data = JSON.parse(data)
                        console.log('上传文件到钉盘')
                        console.log('/api/dt/uploadMedia/')
                        console.log(paramObj)
                        if (data.media_id) {
                            console.log(data.media_id)
                            //isPdf ? that.mediaPdfList.push(data.media_id) : that.mediaList.push(data.media_id)
                            that.mediaPdfList.push(data.media_id)
                        } else {
                            console.log('无media_di')
                        }
                        //that.isPdfFile ? that.pdfList = _cloneArr(fileList) : that.fileList = _cloneArr(fileList)
                        that.pdfList = _cloneArr(fileList)
                    }
                })
            },
            
            beforeExcelUpload(file) {
                console.log('before excel')
                console.log(file)
                const isExcel = file.name.substr(-3) == 'xls'
                const isLt2M = file.size / 1024 / 1024 < 2
                if (!isExcel) {
                    this.$message.error('上传图片只能是 excel 文件!')
                    return false
                }
                if (!isLt2M) {
                    this.$message.error('上传图片大小不能超过 2MB!')
                    return false
                }
                return true
            },
            beforePdfFileUpload(file) {
                console.log('before pdf')
                console.log(file)
                file.name = 'helloWorld'
                isPdf = true
                const isPdfType = file.type === 'application/pdf'
                const isLt2M = file.size / 1024 / 1024 < 10
                if (!isPdfType) {
                    this.$message.error('上传图片只能是 PDF 格式!')
                    return false
                }
                if (!isLt2M) {
                    this.$message.error('上传文件大小不能超过 10MB!')
                    return false
                }
                this.isPdfFile = true
                return true
            },
            beforeFileUpload(file) {
                console.log('before file')
                console.log(file)
                file.name = 'helloWorld'
                isPdf = false
                const isLt2M = file.size / 1024 / 1024 < 10
                if (!isLt2M) {
                    this.$message.error('上传文件大小不能超过 10MB!')
                    return false
                }
                this.isPdfFile = false
                return true
            },
            handlePictureCardPreview(file) {
                this.dialogImageUrl = file.url;
                this.dialogVisible = true;
            },
            
            //加载重新发起审批传递的数据
            loadReApprovalData() {
                if (!ReApprovalTempData.valid) return
                console.log('加载重新发起审批传递的数据')
                this.ruleForm.ProjectId = ReApprovalTempData.ProjectId
                this.ruleForm.Title = ReApprovalTempData.Title
                this.imageList = ReApprovalTempData.imageList
                this.fileList = ReApprovalTempData.fileList
                this.pdfList = ReApprovalTempData.pdfList
                this.data = ReApprovalTempData.data
                var preUrl = 'http://' + window.location.host
                for (let f of this.fileList) {
                    f["response"] = {
                        Content: f.url.replace(preUrl,'~')
                    }
                }
                for (let p of this.pdfList) {
                    p["response"] = {
                        Content: p.url.replace(preUrl, '~')
                    }
                }
                this.dataArr = ReApprovalTempData.dataArr
                this.items = ReApprovalTempData.items
                ReApprovalTempData.valid = false
                upBom = []
                for (let a of this.dataArr) {
                    let bomArr = _cloneArr(a.data)
                    a.tableData = a.data.slice(0, 5)
                    a.totalRows = a.data.length
                    a.items = this.items
                    upBom = upBom.concat(bomArr)
                    console.log(upBom)
                }
            }
            
        },
        created: function () {
            //FlowId = 8
            this.getNodeInfo()
            this.getProjects()
            this.getApproInfo()
            this.loadReApprovalData()
            for (let s of this.specialRoles) {
                this.specialRoleNames.push(s.name)
                this.getSpecialRoleInfo(s.name)
            }
            loadHtml("mainPage", "partPage")
        }
    })

</script>

<style>
    .upload-demo{
        width:400px;
    }
</style>

